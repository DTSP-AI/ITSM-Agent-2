version: '3.8'

services:
  # Main Agentic Social Media Application
  agentic-social:
    build: .
    container_name: rick-agentic-social
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://rick:socialmedia2024@postgres:5432/agentic_social
      - VECTOR_STORE_TYPE=postgresql
      - AZURE_COGNITIVE_SEARCH_ENDPOINT=${AZURE_COGNITIVE_SEARCH_ENDPOINT}
      - AZURE_COGNITIVE_SEARCH_KEY=${AZURE_COGNITIVE_SEARCH_KEY}
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - VERTEX_AI_LOCATION=${VERTEX_AI_LOCATION:-us-central1}
      - LOG_LEVEL=INFO
      - RICK_MODE=PRODUCTION
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
      - ./models:/app/models
    depends_on:
      - postgres
    networks:
      - agentic-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agentic-social.rule=Host(`agentic.local`)"
      - "traefik.http.services.agentic-social.loadbalancer.server.port=8000"

  # PostgreSQL Database for metrics and content storage
  postgres:
    image: postgres:15-alpine
    container_name: rick-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=agentic_social
      - POSTGRES_USER=rick
      - POSTGRES_PASSWORD=socialmedia2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - agentic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rick -d agentic_social"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: rick-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - agentic-social
    networks:
      - agentic-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rick-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agentic-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rick-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=rickgrafana2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - agentic-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rick-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - agentic-network

networks:
  agentic-network:
    driver: bridge
    name: rick-agentic-network

volumes:
  postgres_data:
    name: rick-postgres-data
  prometheus_data:
    name: rick-prometheus-data
  grafana_data:
    name: rick-grafana-data